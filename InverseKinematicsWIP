using System;
using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEditor;
using UnityEngine;
using UnityEngine.XR;

public class InverseKinematics : MonoBehaviour
{
    //Parameters
    [Header("Parameters")]

    public int chainLength;
    public Transform target;
    public Transform pole;

    protected float[] BonesLength;
    protected float CompleteLength;
    protected Transform[] Bones;
    protected Vector3[] Positions;

    // Update is called once per frame
    void Awake()
    {
        Init();        
    }

    void Init()
    {
        //Initialize the arrays
        Bones = new Transform[chainLength + 1];
        Positions = new Vector3[chainLength + 1];
        BonesLength = new float[chainLength];

        CompleteLength = 0;

        //Initialize data
        var current = transform;
        for(var i = Bones.Length - 1; i >= 0; i--)
        {
            Bones[i] = current;

            if(i == Bones.Length - 1)
            {

            }
            else
            {
                BonesLength[i] = (Bones[i + 1].position - current.position).magnitude;
                CompleteLength += BonesLength[i];
            }

                current = current.parent;
        }
    }

    private void LateUpdate()
    {
        ResolveIK();
    }

    void ResolveIK()
    {
        if (target == null)
            return;

        if (BonesLength.Length != chainLength)
            Init();

        //Get the positions
        for(int i = 0; i < Bones.Length; i++)
            Positions[i] = Bones[i].position;

        //Check if distance is possible to reach
        if ((target.position - Bones[0].position).sqrMagnitude >= CompleteLength * CompleteLength)
        {
            //Stretch the bones if it's greater
            var direction = (target.position - Positions[0]).normalized;

            //Set everything as a subset of the root bone (start at position 0 + 1)
            for(int i = 1; i < Positions.Length; i++)
                Positions[i] = Positions[i - 1] + direction * BonesLength[i - 1];
        }

        //Set the positions (vice versa)
        for (int i = 0; i < Positions.Length; i++)
            Bones[i].position = Positions[i];
    }

    private void OnDrawGizmos()
    {
        var current = this.transform;
        for(int i = 0; i < chainLength && current != null && current.parent != null; i++)
        {
            var scale = Vector3.Distance(current.position, current.parent.position) * 0.1f;
            Handles.matrix = Matrix4x4.TRS(current.position, Quaternion.FromToRotation(
                Vector3.up, current.parent.position - current.position), new Vector3(scale, Vector3.Distance(current.parent.position, current.position), scale));
            Handles.color = Color.green;
            Handles.DrawWireCube(Vector3.up * 0.5f, Vector3.one);
            current = current.parent;
        }
    }
}
